# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: windows-2019  # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
strategy:
  matrix:
    Py39_x64:
      python.version: '3.9.9'
      python.arch: x64
      addToPath: true

variables: {'PYTHONUNBUFFERED': '1'}

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    architecture: '$(python.arch)'
  displayName: 'Use Python $(python.version)'

- bash: |
    which python
    python -c "import sys; print(sys.version); print(sys.prefix)"
    # check what Pythons are available
    ls -al /c/hostedtoolcache/windows/Python
  displayName: 'Check Python'

- script: |
    python -m pip install --upgrade pip setuptools wheel
    python -m pip install -r requirements/requirements.in
  displayName: 'Install Python dependencies'

- script: |
    python setup.py build_trans
    pyinstaller -w -D --icon=youtube_dl_gui/data/pixmaps/youtube-dl-gui.ico --add-data="youtube_dl_gui/data;youtube_dl_gui/data" --add-data="youtube_dl_gui/locale;youtube_dl_gui/locale" --exclude-module=tests --version-file=file_version_info.txt --noconfirm --name=yt-dlg youtube_dl_gui/__main__.py
  displayName: 'PyInstaller One Directory'

- script: |
    ls .\dist\yt-dlg\
  displayName: 'List One Directory'

- task: AdvancedInstaller@2
  inputs:
    aipPath: 'docs\yt-dlg.aip'
    aipBuild: 'DefaultBuild'
    aipPackageName: 'yt-dlg-$(Build.BuildNumber).msi'
    aipOutputFolder: '$(Build.ArtifactStagingDirectory)\MSI'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
